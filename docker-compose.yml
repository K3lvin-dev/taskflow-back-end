services:
  # Serviço do NGINX como Proxy Reverso
  nginx:
    image: nginx:1.27-alpine
    container_name: taskflow_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    depends_on:
      - api
    networks:
      - taskflow-net
    command: /bin/sh -c 'if [ ! -f /etc/letsencrypt/live/app.taskflow.vps-kinghost.net/fullchain.pem ]; then echo "Cert not found, waiting..."; exit 1; fi; nginx -g "daemon off;"'

  # Serviço do Certbot para geração inicial de certificado
  certbot-init:
    image: certbot/certbot
    container_name: taskflow_certbot_init
    restart: "no"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    command: >
      sh -c "certbot certonly --webroot -w /var/www/certbot
      --non-interactive --agree-tos -m kelvingabriel70@hotmail.com
      -d app.taskflow.vps-kinghost.net --rsa-key-size 4096"
    networks:
      - taskflow-net

  # Serviço do Certbot para renovação automática
  certbot-renew:
    image: certbot/certbot
    container_name: taskflow_certbot_renew
    restart: always
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: >
      sh -c "trap exit TERM; while :; do certbot renew --quiet; sleep 12h & wait $${!}; done"
    networks:
      - taskflow-net

  # Serviço da API .NET (TaskFlowAPI)
  api:
    container_name: taskflow_api
    image: ghcr.io/k3lvin-dev/taskflow-api:main
    restart: always
    depends_on:
      - postgres
      - redis
    environment:
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=${DB_CONNECTION_STRING}
      - Redis__Configuration=redis:6379
    networks:
      - taskflow-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health" ]
      interval: 10s
      retries: 5
      timeout: 5s

  # Serviço do Banco de Dados PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: taskflow_postgres
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - taskflow-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      timeout: 5s

  # Serviço de Cache com Redis
  redis:
    image: redis:7-alpine
    container_name: taskflow_redis
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - taskflow-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      timeout: 5s

volumes:
  postgres_data:
  redis_data:

networks:
  taskflow-net:
    driver: bridge
