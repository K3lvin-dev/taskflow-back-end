name: CI/CD - Deploy TaskFlow API to VPS

on:
  push:
    branches: ["main", "develop"]

jobs:
  # ---------------------------
  # Job 1: Build & Push Docker
  # ---------------------------
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Definir tag da imagem
        id: image_tag
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "TAG=latest" >> $GITHUB_ENV
          else
            echo "TAG=dev" >> $GITHUB_ENV
          fi

      - name: Definir tag da imagem
        id: image_tag
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "TAG=latest" >> $GITHUB_ENV
          else
            echo "TAG=dev" >> $GITHUB_ENV
          fi

      - name: Build & Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/k3lvin-dev/taskflow-api:${{ env.TAG }}
          tags: ghcr.io/k3lvin-dev/taskflow-api:${{ env.TAG }}

  # ---------------------------
  # Job 2: Deploy na VPS
  # ---------------------------
  deploy:
    needs: build-and-push
    runs-on: self-hosted
    environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}
    environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: false
          clean: false

      - name: Definir profile e arquivo de ambiente
        id: deploy_vars
      - name: Definir profile e arquivo de ambiente
        id: deploy_vars
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "PROFILE=prd" >> $GITHUB_ENV
            echo "ENV_FILE_SECRET=${{ secrets.ENV_FILE_PRD }}" >> $GITHUB_ENV
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "PROFILE=prd" >> $GITHUB_ENV
            echo "ENV_FILE_SECRET=${{ secrets.ENV_FILE_PRD }}" >> $GITHUB_ENV
            echo "DOMAIN=app.taskflow.vps-kinghost.net" >> $GITHUB_ENV
          else
            echo "PROFILE=dev" >> $GITHUB_ENV
            echo "ENV_FILE_SECRET=${{ secrets.ENV_FILE_DEV }}" >> $GITHUB_ENV
            echo "DOMAIN=dev.taskflow.vps-kinghost.net" >> $GITHUB_ENV
          fi

      - name: Atualizar arquivo .env
        run: echo "${{ env.ENV_FILE_SECRET }}" > .env
        run: echo "${{ env.ENV_FILE_SECRET }}" > .env

      - name: Logar no GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Criar diretórios para certificados
      - name: Criar diretórios para certificados
        run: |
          mkdir -p ./data/certbot/conf
          mkdir -p ./data/certbot/www

      - name: Parar containers existentes para liberar a porta 80
        run: docker compose down --remove-orphans || echo "Nenhum container em execução para parar."
      - name: Parar containers existentes para liberar a porta 80
        run: docker compose down --remove-orphans || echo "Nenhum container em execução para parar."

      - name: Gerar ou Renovar Certificado
      - name: Gerar ou Renovar Certificado
        run: |
          docker run --rm \
            --entrypoint /bin/sh \
            -v $(pwd)/data/certbot/conf:/etc/letsencrypt \
            -v $(pwd)/data/certbot/www:/var/www/certbot \
            certbot/certbot -c '
              if [ -d /etc/letsencrypt/live/${{ env.DOMAIN }} ]; then
                echo "Certificado encontrado. Tentando renovar..."
                certbot renew;
              else
                echo "Nenhum certificado encontrado. Gerando um novo..."
                certbot certonly --standalone -d ${{ env.DOMAIN }} --email ${{ secrets.EMAIL }} --agree-tos --non-interactive;
              fi
            '

      - name: Deploy com Docker Compose
        run: |
          docker compose --profile ${{ env.PROFILE }} pull
          docker compose --profile ${{ env.PROFILE }} up -d --build
          docker compose --profile ${{ env.PROFILE }} pull
          docker compose --profile ${{ env.PROFILE }} up -d --build
          docker image prune -af


